!!omap
- schema_version: 0.1.0


# New version.


# #======================================================================
# #    These preamble modules are mandatory
# #
- general:                       # Defines the directory structure for.
    data_path: input/data
    msdir: msdir
    input: input
    output: output
    prefix: wlm                  # The prefix for all the output files.
    init_pipeline: true

- get_data:                      # Creates "log-get_convert_and_extract_data.txt"
    dataid: ['ngc3621']          # The measurement set w/o the .ms extension.
    mvftoms:
      enable: false
      channel_range: 'null'      # In casa format i.e. spw:bcha~echa e.g. 0:100~200.
    untar:
      enable: false
    combine:
      enable: false

- observation_config:            # Creates "log-automatically_catergorize_observed_fields.txt" in pwd.
    obsinfo:
      enable: true               # Creates "meerkathi-<ms-name>-obsinfo.txt" in output/. Needs to be 'true' on the first run.
    bpcal: 0408-65               # Bandpass calibrator.
    fcal: 0408-65                # Flux calibrator.
    gcal: 1117-248               # Gain (or phase) calibrator.
    xcal: auto                   # Is a requirement to be defined, but only used for polarisation calibration.
    target: NGC3621              # Target source.
    reference_antenna: 'm003'    # Index or name.
    primary_beam:
      enable: false
# #======================================================================

# NOTE that this creates "log-get_convert_and_extract_data.txt" and
# "log-automatically_catergorize_observed_fields.txt" in pwd. These
# look something like "2019-06-11 12:58:46,003 - STIMELA-1", which is
# the time stamp, followed by the 'order' in which the stimela module
# was run.




# # - prepare_data:
# #     enable: true
# #     fixvis:
# #       enable: false
# #     prepms:
# #       enable: false
# #     add_spectral_weights:
# #       enable: true




# # #======================================================================
# # #    Flagging
# # #
# - flagging:                           # Creates "log-pre-calibration_flagging.txt".
#     enable: true
#     label: ''                         # Name of the .ms file you want to apply flagging to.
#     autoflag_autocorr_powerspectra:   # Flag antennas based on the (mis)behaviour of their autocorrelations.
#       enable: false
#     flag_autocorr:                    # Flag the autocorrleations.
#       enable: true
#     flag_spw:                         # Spectral windows are sub-bands. MeerKAT has only one sub-band.
#       enable: true
#       channels: '*:856~880MHz,*:1658~1800MHz,*:1420.0~1421.3MHz'  # Bandpass edges and the Milky Way
#     static_mask:
#       enable: false                       # Disabled for our example but you will likely want it.
#       mask: labelled_rfimask.pickle.npy   # Preloaded RFI flags which come with the pipeline files and are copied into input/.
#     rfinder:                              # Diagnostic which gives the expected image noise, etc. later on. No flagging done.
#       enable: false
#       field: target
#       polarization: Q                     # 'Q' or 'q' for all polarisations.
#     autoflag_rfi:                         # Uses AO flagger - https://sourceforge.net/p/aoflagger/wiki/Home/.
#       enable: true
#       fields: fcal,bpcal,gcal             # Don't list the target flag, as target spectra may be confused as RFI.
#       column: DATA                        # At this stage, we only have the DATA column.
#       strategy: firstpass_QUV.rfis        # Default map for MeerKAT data.
#     flagging_summary:                     # Creates "log-flagging_summary_flagging_0_.txt" and "log-flagging_summary_crosscal_0.txt".
#       enable: true
# # #======================================================================



# # #======================================================================
# # #    Calibrate delay, bandpass and gain
# # #
# # #    First generation calibration: Use calibrator field (fields
# # #    containing sources with known flux, shape and spectral
# # #    behaviour) to determine gain solutions which can be transferred
# # #    to the target field
# # #
# - cross_cal:               # Creates "log-cross_calibration.txt"
#     enable: true
#     label: 1gc1            # Prefix labels for the output files (FYI, 1gc1 stands for "1st generation calibration: 1")
#     uvrange: '>50'         # Can exclude shorter baselines if you're concerned about RFI.
#     otfdelay: true         # "on-the-fly" delay calibration to be executed whilst doing bpcal and gaincal.
#     clear_cal:             # Remove old calibration results.
#       enable: true
#       field:
#       - bpcal
#       - fcal
#       - target
#       - gcal
#       addmodel: true       # Keep the model which was used to correct the data.
#     set_model:             # Sets the model visibility amp and phase of your calibrator (setjy).
#       enable: true
#       field:
#       - fcal               # Flux calibrator
#       meerkathi_model: true
#     delay_cal:             # Determine delay solutions.
#       enable: true
#       combine: scan        # Extrapolate over the delay calibrator scans.
#       solint: inf
#       field:
#       - bpcal              # Use the bandpass calibrator for delay calibration.
#       plot:
#         enable: true       # Plots are in output/reports.
#     bp_cal:                # Determine bandpass solutions.
#       enable: true
#       combine: scan
#       solint: inf
#       remove_ph_time_var: true    # Remove large temporal phase variations from bandpass calibrator before solving
#       field:
#       - bpcal
#       plot:
#         enable: true
#     gain_cal_flux:                # Determine flux solutions.
#       enable: true
#       combine: ''
#       field:
#       - fcal
#       plot:
#         enable: true
#     gain_cal_gain:                # Determine gain solutions.
#       enable: true
#       combine: ''
#       field:
#       - gcal
#       plot:
#         enable: true
#     transfer_fluxscale:           # Copy flux calibration solutions to the gain calibrator.
#       enable: true
#       reference:
#       - fcal
#       transfer:
#       - gcal
#       plot:
#         enable: true
#     apply_delay_cal:              # Apply delay solutions to all sources.
#       enable: true
#       field:
#       - bpcal
#       applyto:
#       - bpcal
#       - gcal
#       - target
#       applymode: calflag          # Apply flags and the calibration from the calibration table.
#     apply_bp_cal:                 # Apply the bandpass calibrator to all sources.
#       enable: true
#       field:
#       - bpcal
#       applyto:
#       - bpcal
#       - gcal
#       - target
#       applymode: calflag
#     apply_gain_cal_gain:          # Apply gain calibrator solutions.
#       enable: false
#       field:
#       - gcal
#       applyto:
#       - bpcal
#       - gcal
#       - target
#       applymode: calflag
#     apply_transfer_fluxscale:     # Implement the transfered flux calibration solutions.
#       enable: true
#       field:
#       - gcal
#       applyto:
#       - bpcal
#       - gcal
#       - target
#       applymode: calflag
#     flagging_summary:
#       enable: true
# # #======================================================================
# # Check "log-flgging_summary_crosscal_0.txt".



# # #======================================================================
# # #    Create diagnostics
# - inspect_data:        # Creates "log-inspect_data.txt".
#     enable: true
#     label: 1gc1        # Input data prefix
#     real_imag:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#     amp_uvwave:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#     amp_phase:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#     amp_ant:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#     phase_uvwave:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#     amp_scan:
#       enable: true
#       fields:
#       - gcal
#       - bpcal
#       - target
# # #======================================================================

# # # After inspect_data, check the .pngs in the
# # # output/diagnostic_plots/crosscal/ directory.



# # #======================================================================
# # #    Isolate the target post calibration.
# - split_target:              # Creates "log-split_and_average_target_data.txt".
#     enable: true
#     label_in: ''
#     label_out: split
#     split_target:
#       enable: true
#       time_average: ''
#       freq_average: 1
#       column: corrected      # Get the colum with CORRECTED visibilites.
#       otfcal:
#         enable: false        # Calibration had already been applied during cross_cal.
#         callabel: 1gc1
#     prepms:                  # To use with MeqTrees, but we are not using MeqTrees for self_cal.
#       enable: false
#     changecentre:
#       enable: false
#       ra: ''
#       dec: ''
#     obsinfo:                 # This changes the indexer for the rest
#                              # of the pipeline as we are moving from
#                              # the index created by 'observation_config'
#                              # to the new one, by split.
#                              # "output/meerkathi-mkathi-test-split_mst-obsinfo.txt"
#       enable: true
#       listobs: true
#       summary_json: true
# # #======================================================================




# # #======================================================================
# # #    Self calibration.
# # #
# # #    Second generation calibration.
# - self_cal:                  # Creates "log-self_calibration_loop.txt".
#     enable: true
#     label: NGC3621_split                    # Prefix labels for the output files
#     undo_subtractmodelcol: false    # Replace the corrected column
#                                     # with the sum of corrected and
#                                     # model columns. If you re-run
#                                     # self_cal, then set this to
#                                     # 'true' as the model subtraction
#                                     # happened during previous
#                                     # iteration(s)
#     spwid: 0
#     primary_beam: false             # Not implemented.
#     img_pol: I
#     img_npix: 5540                  # Size of the field in pixels (based on img_cell and beam fov) = cellsize*lambda/dishdiameter [arcsec]
#     img_cell: 10                    # arcsec
#     img_padding: 1.3                # 1.3 * img_npix
#     img_weight: briggs              # Weighting parameter.
#                                     # Currently only briggs allowed.
#     img_robust: -1.5                # -2 (uniform) to 2(natural).
#                                     # Natural weighting gives constant
#                                     # weights to all visibilities,
#                                     # gives optimum point-source
#                                     # sensitivity in an image. However
#                                     # the synthesised beam-shape and
#                                     # sidelobe levels are usually
#                                     # poor. Uniform weighting gives a
#                                     # weight inversely proportional to
#                                     # the sampling density function,
#                                     # minimising the sidelobe
#                                     # level. However the noise level
#                                     # can be a factor of 2 worse than
#                                     # natural weighting.
#     img_niter: 1000000
#     img_facets: 11                  # Split a wide-field image into
#                                     # seveal smaller fields (Unused in
#                                     # wsclean).
#     img_mgain: 0.9                  # Threshold of flux subtraction to
#                                     # be reached.
#     img_cleanborder: 0
#     img_nchans: 3
#     img_joinchannels: true              # Multi-freqency synthesis
#                                         # (MFS) for wide band imaging.
#     img_fit_spectral_pol: 1             # '1' uses a linear fit
#                                         # across the bandpass,
#                                         # since the source
#                                         # structure is frequency
#                                         # dependant over MeerKAT's
#                                         # 1 GHz bpass.
#     calibrate_with: cubical             # Meqtrees or cubical as
#                                         # the calibration
#                                         # philosophy. https://cubical.readthedocs.io/en/latest/index.html
#                                         # Cubical is an
#                                         # accelerated gain solver.
#     cal_gain_amplitude_clip_low: 0.5    # Expect self-cal gains to be ~1.
#     cal_gain_amplitude_clip_high: 1.5
#     cal_niter: 2                        # Number of self_cal iterations
#     start_at_iter: 1
#     image:
#       enable: true
#       auto_mask: [40, 20, 5, 5, 3]      # Each N represent the N*sigma
#                                         # allowed noise. This decreases
#                                         # with each iteration of
#                                         # self-calibration. len(auto_mask)
#                                         # = 1 + cal_niter.
#       auto_threshold: [0.5, 0.5, 0.5, 0.25, 0.25]  # Noise floor
#                                                    # in units of
#                                                    # N*sigma. But
#                                                    # because of
#                                                    # the mask,
#                                                    # you can
#                                                    # confidently
#                                                    # go slightly
#                                                    # below the
#                                                    # noise.
#       column: [DATA, CORRECTED_DATA, CORRECTED_DATA, CORRECTED_DATA, CORRECTED_DATA]  # Start self calibration with DATA becasue split_target from the previous step only has this column.
#       multi_scale: false                           # Treat point and non-point sources differently.
#       multi_scale_scales: [0, 40, 80, 150]         # Scale of sources in pixel units, starting with 0 - a point source.
#       local_rms: false
#     sofia_mask:                   # A prefabricated mask. Pybdsm is better for point sources but this is better for other emission.
#       enable: false
#       threshold: 5
#       scale_noise_window: 51
#     extract_sources:              # Use either the SoFiA mask or this one.
#       enable: false
#       sourcefinder: 'pybdsm'      # Python Blob Detector and Source Finder - https://www.astron.nl/citt/pybdsf/
#       spi: false                  # Source spectral index.
#       thresh_pix: [10, 10, 10]
#       thresh_isl: [8, 8, 5]
#     aimfast:                      # Automatically check the stats from one image to the next, to determine if self-cal is improving or not. If not, kills self-cal in a clean way. See 'log-aimfast.txt' for a summary of self-cal statistics. Want skew ~0, kurt(osis) ~3.
#       enable: false
#       tolerance: 0.02             # Relative change in weighted mean of several indicators from aimfast. If the change in quality is <2%, then don't bother progressing. See 'log-aimfast.txt'.
#       plot: true
#     calibrate:
#       enable: true
#       model: ['1', '2', '3', '4']           # Name for each iteration
#       output_data: [CORR_DATA]              # Naming convention used in CORR_DATA
#       gain_matrix_type: [GainDiagPhase, GainDiag, GainDiag, GainDiag]       # Amplitude & Phase, Amplitude, Amplitude, Amplitude
#       Gsols_time: [40, 200, 200]            # Solution interval = N*dump_rate (sec). 20 mins is fine.
#       Gsols_channel: [0, 0, 0]
#       add_vis_model: true                   # Use clean components as a sky model for calibration.
#       model_mode: vis_only
#       ragavi_plot:
#         enable: true
#     restore_model:
#       enable: false                         # W.I.P: Specifiying this is currently a requirement for config.yaml, but not working in the pipeline
#       model: 2+3
#       clean_model: '4'
#     transfer_apply_gains:                   # Not using, but is a required parameter for schema.
#       enable: false
#       transfer_to_label: hires
#     transfer_model:                         # Not using, but is a required parameter for schema.
#       enable: false
#       transfer_to_label: hires
#       model: auto
#     highfreqres_contim:                     # Do a better resoluton spectral fit across the bandpass. Gets output as "wlm_fine-MSF-image"
#       enable: false
#       chans: 12                             # Nchans
#       deconv_chans: 3
#       fit_spectral_pol: 2                   # Polynomial to use to smooth spectra during deconvolution across wideband channels.
#     flagging_summary:
#       enable: true
# # #======================================================================



# # #======================================================================
# # #    Imaging
# # #
# - image_HI:
#     enable: true
#     label: NGC3621_split
#     restfreq: 1.420405752GHz
#     npix: [1024]                     # Num pix now to zoom into emission area.
#     cell: 1.3
#     weight: briggs
#     robust: -1.5
#     subtractmodelcol:                # Model based on self-cal. Switch to false if imaging for the second time.
#       enable: true
#     mstransform:                     # AIPS' UVLIN Creates a measurement set with label mst.ms
#       enable: true
#       doppler: true
#       telescope: meerkat
#       mode: frequency
#       outframe: bary
#       uvlin: true
#       fitspw: '0:0~900;1010~1900'    # Line free channels for this dataset.
#       fitorder: 1
#       column: corrected
#     sunblocker:                      # Flag solar RFI.
#       enable: true
#     wsclean_image:                   # wsclean CLEANing algorithm.
#       enable: true
#       wscl_niter: 2                  # Like on-the-fly self-cal.
#       rm_intcubes: true
#       use_mstransform: true          # Use the mstransform from above.
#       pol: I
#       spwid: 0
#       nchans: 50
#       firstchan: 650
#       binchans: 1                    # Step.
#       npix: [1024]                   # This will override the global which is set above.
#       padding: 1.2                   # Grid and image of (padding) x (no. of pixels) to deal with aliasing.
#       cell: 1.3                      # Cell size.
#       weight: briggs
#       robust: -1.5
#       niter: 10000000
#       mgain: 1.0
#       automask: 10                    # Same meaning as in self_cal. Set is based on what we did for self-cal.
#       autothreshold: 0.5              # Same meaning as in self_cal. Set is based on what we did for self-cal.
#       make_cube: true
#       multi_scale: false              # Does not assume that everything is a point source.
#       multi_scale_scales: [0, 40, 80, 150] # pixel
#     casa_image:                       # casa's CLEANing algorithm
#       enable: false
#       use_mstransform: true
#       pol: I
#       spwid: 0
#       nchans: all
#       startchan: 0
#       npix: [1024]
#       cell: 7
#       weight: briggs
#       robust: -1.5
#       niter: 0
#       threshold: 10mJy
#       port2fits: true
#     sofia:                            # The SoFiA source finder
#       enable: true
#       rmsMode: mad                    # Method to determine RMS
#       threshold: 4.0                  # Source finding threshold N*sigma that you consider as a source.
#     freq_to_vel:
#       enable: true
#     pb_cube:
#       enable: false
#     flagging_summary:
#       enable: true
# # #======================================================================